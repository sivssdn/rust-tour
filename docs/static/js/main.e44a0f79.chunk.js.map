{"version":3,"sources":["components/DescriptionCard.tsx","components/IdeCard.tsx","components/chapters/enums.ts","components/chapters/0.tsx","components/chapters/1.tsx","components/chapters/2.tsx","components/chapters/3.tsx","components/chapters/4.tsx","components/chapters/5.tsx","components/chapters/6.tsx","components/chapters/7.tsx","components/chapters/8.tsx","components/chapters/9.tsx","components/chapters/10.tsx","components/chapters/end.tsx","pages/Tour.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Description","header","nextChapter","chapterContent","className","toString","includes","onClick","IDECard","url","src","ChapterNames","IdeLinks","Chapter0","Chapter1","Chapter2","chapter3","Chapter4","Chapter5","Chapter6","Chapter7","Chapter8","Chapter9","Chapter10","EndChapter","href","Tour","useState","currentChapter","setCurrentChapter","chapterCount","setChapterCount","chapters","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e44a0f79.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    header: string;\n    chapterContent: React.FC;\n    nextChapter: () => void;\n\n}\n\nconst Description: React.FC<Props> = ({ header, nextChapter, chapterContent }) => {\n    return (\n        <div className=\"card description-card col l6 m6 s12\">\n            <div className=\" description-container\">\n                <h3>Rust Tour</h3>\n                <strong>{header}</strong>\n                <hr />\n                <div className=\"section\"></div>\n                {chapterContent}\n                <div className=\"section\"></div>\n                {!header.toString().includes(\"New Beginning\")\n                    && (<a className=\"btn btn-medium yellow darken-4 next-chapter\" onClick={nextChapter}>Next Chapter</a>)}\n                <div className=\"section\"></div>\n            </div>\n        </div>\n    );\n}\n\nexport default Description;\n","import React from \"react\";\n\ninterface Props {\n    url: string;\n}\nconst IDECard: React.FC<Props> = ({ url }) => {\n    return (\n        <>\n            <div className=\"card col l6 m6 s12 ide-card\">\n                <iframe src={url}></iframe>\n            </div>\n        </>\n    );\n}\n\nexport default IDECard;","export const ChapterNames = [\n  \"Welcome\",\n  \"Hello World\",\n  \"Ways of saying Hello World\",\n  \"Data Types\",\n  \"Strings\",\n  \"Vectors\",\n  \"Conditional Statements\",\n  \"Loops\",\n  \"Functions\",\n  \"Pointers\",\n  \"Struct\",\n  \"New Beginning\"\n];\n\nexport const IdeLinks = [\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=430c931ce1984d135e29c0c70a5b383f\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ba97ded3d1758cbdd352442fa1e02d3a\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2b56b12a9d266b2193abb836ea8fc457\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=578819bb322fd3eeec635a1e987c7680\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e1fef6dce2ae6fe1154c671a44b1d348\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a388831f7ad2ba8ef11c08a56643ed9d\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=467b84300db547dc231c50b3ddb78dec\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d38700292a0e9923e5e352ed4e610961\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0b97698f61bcd1613356ef834f5dc356\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0dd44c8b7500f1cf58531c9e2ad06c6c\",\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=91c5aa4f43ad9359a5e0cca4310a1dc2\",\n\n  \"https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=430c931ce1984d135e29c0c70a5b383f\"\n];\n","import React from 'react';\n\nconst Chapter0: React.FC = () => {\n    return (\n        <div>\n            Rust Tour welcomes you to very quick walk through Rust lang syntax. <br />\n            The aim here is to get you a sense of syntax of Rust, before you immerse yourself into mastering the language.\n                <div className=\"section\"></div>\n            Following the tour is very simple.\n                <div className=\"section\"></div>\n            You have chapter description on the left and a Rust editor on the right.\n                <div className=\"section\"></div>\n            The Rust editor on the right have some sample code, related to the chapter. You can practice each chapter by tweaking the code.\n                <div className=\"section\"></div>\n            You can always click <em>Next Chapter</em> button on the left to transition to the next chapter.\n        </div>\n    );\n}\n\nexport default Chapter0;","import React from 'react';\n\nconst Chapter1: React.FC = () => {\n    return (\n        <div>\n            Let's start by feeling good about how easy 'Hello World' Program is.\n            <div className=\"section\"></div>\n            Notice the ! (exclamation mark) after the <code>println</code>. It means <code>println</code> is not a function but a macro.\n            <div className=\"section\"></div>\n            P.S. Do not forget the semicolon;\n        </div>\n    );\n}\n\nexport default Chapter1;","import React from 'react';\n\nconst Chapter2: React.FC = () => {\n    return (\n        <div>\n            Rust gives you various ways of expressing \"Hello World!\". Some of them you can see on right.\n            <div className=\"section\"></div>\n            Data Types waiting for you in next chapter.\n        </div>\n    );\n}\n\nexport default Chapter2;","import React from \"react\";\n\nconst chapter3: React.FC = () => {\n    return (\n        <div>\n            Rust being a statically typed language, has data types. The primitive types contains scalar and compound data types. <br />\n            <div className=\"section\"></div>\n            Few things to remember while handling data types: <br />\n\n            - All variables are immutable by default. <br />\n            - Rust is block scoped. <br />\n            - Specifying data type explicitly is not always required for primitive types. <br />\n\n            <div className=\"section\"></div>\n            <strong>Scalar Types:</strong> <br />\n            Integer - unsigned being only positive, signed being both negative and positive<br />\n            <table>\n                <thead>\n                    <tr>\n                        <th>Size</th>\n                        <th>Unsigned</th>\n                        <th>Signed</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>8 bits</td>\n                        <td>u8</td>\n                        <td>i8</td>\n                    </tr>\n                    <tr>\n                        <td>16 bits</td>\n                        <td>u16</td>\n                        <td>i16</td>\n                    </tr>\n                    <tr>\n                        <td>32 bits</td>\n                        <td>u32</td>\n                        <td>i32</td>\n                    </tr>\n                    <tr>\n                        <td>64 bits</td>\n                        <td>u64</td>\n                        <td>i64</td>\n                    </tr>\n                    <tr>\n                        <td>128 bits</td>\n                        <td>u128</td>\n                        <td>i128</td>\n                    </tr>\n                </tbody>\n            </table>\n\n            <div className=\"section\"></div>\n            Float - f32, f64 for 32 bits and 64 bits respectively. <br />\n            Boolean - bool <br />\n            Character - char <br />\n\n            <div className=\"section\"></div>\n            <strong>Compound Types:</strong> <br />\n            Compound data types contains collection of scalar types.\n            <br /><br />\n            Tuples - A collection of values of different data types. <br />\n            Arrays - A collection of values of similar data types. Arrays are of fixed length, hence cannot be re-sized.\n\n            <div className=\"section\"></div>\n            You can always use <code>:?</code> with {} to print the entire array or touple.\n            <div className=\"section\"></div>\n            Let's talk about strings next.\n        </div>\n    )\n}\n\nexport default chapter3;","import React from \"react\";\n\nconst Chapter4: React.FC = () => {\n    return (\n        <div>\n            Rust has two data types for representing strings based on where are allocated in memory. <br />\n            <code>String</code> is a growable type stored in heap, whereas <code>str</code> is of fixed length stored somewhere in memory.\n            <div className=\"section\"></div>\n            The difference between string length and capacity lies in actual length vs total memory allocated.\n            E.g., To declare an empty string capable of storing 10 characters can be done with <code>String::with_capacity(10)</code>\n            <div className=\"section\"></div>\n            <code>mut</code> keyword is required to make a variable mutable.\n            <div className=\"section\"></div>\n            Don't feel like being bothered about heap and stack? Rust requires you to think a little about it with it's ownership feature.\n            <div className=\"section\"></div>\n            Try naming your variables starting with a number.\n            <div className=\"section\"></div>\n            Vectors coming right up next.\n        </div>\n    )\n}\n\nexport default Chapter4;","import React from \"react\";\n\nconst Chapter5: React.FC = () => {\n    return (\n        <div>\n            Vectors are similar to arrays but re-sizable. They support push and pop methods to add or remove elements.\n            <br />\n            The basic syantax can be seen on right.\n            <div className=\"section\"></div>\n            Let's explore conditions next.\n        </div>\n    )\n}\n\nexport default Chapter5;","import React from \"react\";\n\nconst Chapter6: React.FC = () => {\n    return (\n        <div>\n            Rust has renamed <code>switch</code> as <code>match</code>. <code>_</code> (underscore) is used as default case.\n            <div className=\"section\"></div>\n            Apart from that, just like other languages, <code>if </code> and <code>if else</code> are available.\n            <div className=\"section\"></div>\n            Conditional operator though, is not present yet.\n            <div className=\"section\"></div>\n            Loops next.\n        </div>\n    )\n}\n\nexport default Chapter6;","import React from \"react\";\n\nconst Chapter7: React.FC = () => {\n    return (\n        <div>\n            Following are the control flow loops.\n            <div className=\"section\"></div>\n            - <code>loop</code> : Infinite loop without any exit statement to end the loop.\n            <code>break</code> keyword works just fine in case you want to terminate the loop. <br />\n            - <code>while</code> : Loop with exit conditional. <br />\n            - <code>for</code> : The good old for loop.\n            <div className=\"section\"></div>\n            Loops have a label feature that can be used in conjunction with continue statement to jump.\n            <div className=\"section\"></div>\n            Notice that you do not need parenthesis with while or if statements.\n            <div className=\"section\"></div>\n            Try count++\n            <div className=\"section\"></div>\n            Functions coming up next.\n        </div>\n    )\n}\n\nexport default Chapter7;","import React from \"react\";\n\nconst Chapter8: React.FC = () => {\n    return (\n        <div>\n            Function <code>main</code> is the entry point of Rust programs.\n            Rust follows snake case as the conventional style for function and variable names\n            <div className=\"section\"></div>\n            The types of function arguments need to be defined.\n            <div className=\"section\"></div>\n            Function return values are specified by mentioning types they return. A function can have multiple return values.\n            <div className=\"section\"></div>\n            To return a value from function, <code>return</code> keyword is not required.\n            Specifying the return value without semicolon inside the function does the trick.\n            <div className=\"section\"></div>\n            Rust also support closures. The syntactic difference is that pipe needs to be used for function arguments.\n            The scope of closures includes their enclosing function's scope along with their immediate scope.\n            <div className=\"section\"></div>\n            Let's check Pointers next.\n        </div>\n    )\n}\n\nexport default Chapter8;","import React from \"react\";\n\nconst Chapter9: React.FC = () => {\n    return (\n        <div>\n            Pointers are variables that points to a resource in memory.\n            They themselves contains address of the resource they are pointing to.\n            <div className=\"section\"></div>\n            Pointers are particularly useful while using <code>borrowing</code> feature on a variable.\n            <div className=\"section\"></div>\n            In Rust, <code>&</code> (ampersand) keyword is used to create a pointer to a variable.\n            <div className=\"section\"></div>\n            Exploring Structs next.\n        </div>\n    )\n}\n\nexport default Chapter9;","import React from \"react\";\n\nconst Chapter10: React.FC = () => {\n    return (\n        <div>\n            <code>struct</code> is used to create a custome data type with mixed data types. They are similar to class in other languages.\n            <div className=\"section\"></div>\n            Structs can be created either by specifying names for the fields, or without names, similar to tuples.\n            <div className=\"section\"></div>\n            One of the major feature of struct is the ability to define functions using <code>impl</code> keyword.\n            <div className=\"section\"></div>\n            This was a very brief primer of the Rust, to help you dive deep into further syntactic features. <br />\n            <div className=\"section\"></div>\n            All the best learning Rust!\n        </div>\n    )\n}\n\nexport default Chapter10;","import React from \"react\";\n\nconst EndChapter: React.FC = () => {\n    return (\n        <div>\n            All the best learning Rust!\n            <div className=\"section\"></div>\n            This tour is an effort of Paras Bhattrai. Hope you enjoyed. <br />\n            Github: <a href=\"https://github.com/sivssdn\">Paras</a>\n        </div>\n    )\n}\n\nexport default EndChapter;","import React, { useState } from 'react';\n\nimport Description from \"../components/DescriptionCard\";\nimport IDECard from \"../components/IdeCard\";\nimport { ChapterNames, IdeLinks } from \"../components/chapters/enums\";\nimport Chapter0 from \"../components/chapters/0\";\nimport Chapter1 from \"../components/chapters/1\";\nimport Chapter2 from \"../components/chapters/2\";\nimport Chapter3 from \"../components/chapters/3\";\nimport Chapter4 from \"../components/chapters/4\";\nimport Chapter5 from \"../components/chapters/5\";\nimport Chapter6 from \"../components/chapters/6\";\nimport Chapter7 from \"../components/chapters/7\";\nimport Chapter8 from \"../components/chapters/8\";\nimport Chapter9 from \"../components/chapters/9\";\nimport Chapter10 from \"../components/chapters/10\";\nimport EndChapter from \"../components/chapters/end\";\n\nconst Tour = () => {\n    const [currentChapter, setCurrentChapter] = useState(<Chapter0 />);\n    const [chapterCount, setChapterCount] = useState(0);\n    const chapters = [\n        <Chapter0 />, <Chapter1 />, <Chapter2 />, <Chapter3 />, <Chapter4 />,\n        <Chapter5 />, <Chapter6 />, <Chapter7 />, <Chapter8 />, <Chapter9 />,\n        <Chapter10 />, <EndChapter />\n    ];\n\n    const changeChapter = () => {\n        if (chapterCount < 11) setChapterCount(chapterCount + 1);\n        setCurrentChapter(chapters[chapterCount + 1])\n\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"section\"></div>\n            <div className=\"row\">\n                <Description header={\"Chapter \" + chapterCount + \": \" + ChapterNames[chapterCount]}\n                    nextChapter={changeChapter}\n                    chapterContent={currentChapter as unknown as React.FC}\n                />\n                <IDECard url={IdeLinks[chapterCount]} />\n            </div>\n        </div>\n    );\n}\n\nexport default Tour;\n","import React from 'react';\nimport Tour from \"./pages/Tour\"\n\nconst App = () => {\n  return (\n    <Tour />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}