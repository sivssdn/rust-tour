(this.webpackJsonprust_tour=this.webpackJsonprust_tour||[]).push([[0],{10:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),r=a(3),o=a.n(r),c=(a(9),a(1)),s=function(e){var t=e.header,a=e.nextChapter,n=e.chapterContent;return l.a.createElement("div",{className:"card description-card col l6 m6 s12"},l.a.createElement("div",{className:" description-container"},l.a.createElement("h3",null,"Rust Tour"),l.a.createElement("strong",null,t),l.a.createElement("hr",null),l.a.createElement("div",{className:"section"}),n,l.a.createElement("div",{className:"section"}),!t.toString().includes("New Beginning")&&l.a.createElement("a",{className:"btn btn-medium yellow darken-4 next-chapter",onClick:a},"Next Chapter"),l.a.createElement("div",{className:"section"})))},i=function(e){var t=e.url;return l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"card col l6 m6 s12 ide-card"},l.a.createElement("iframe",{src:t})))},u=["Welcome","Hello World","Ways of saying Hello World","Data Types","Strings","Vectors","Conditional Statements","Loops","Functions","Pointers","Struct","New Beginning"],m=["https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=430c931ce1984d135e29c0c70a5b383f","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ba97ded3d1758cbdd352442fa1e02d3a","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2b56b12a9d266b2193abb836ea8fc457","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=578819bb322fd3eeec635a1e987c7680","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e1fef6dce2ae6fe1154c671a44b1d348","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=a388831f7ad2ba8ef11c08a56643ed9d","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=467b84300db547dc231c50b3ddb78dec","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=d38700292a0e9923e5e352ed4e610961","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0b97698f61bcd1613356ef834f5dc356","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0dd44c8b7500f1cf58531c9e2ad06c6c","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=91c5aa4f43ad9359a5e0cca4310a1dc2","https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=430c931ce1984d135e29c0c70a5b383f"],d=function(){return l.a.createElement("div",null,"Rust Tour welcomes you to very quick walk through Rust lang syntax. ",l.a.createElement("br",null),"The aim here is to get you a sense of syntax of Rust, before you immerse yourself into mastering the language.",l.a.createElement("div",{className:"section"}),"Following the tour is very simple.",l.a.createElement("div",{className:"section"}),"You have chapter description on the left and a Rust editor on the right.",l.a.createElement("div",{className:"section"}),"The Rust editor on the right have some sample code, related to the chapter. You can practice each chapter by tweaking the code.",l.a.createElement("div",{className:"section"}),"You can always click ",l.a.createElement("em",null,"Next Chapter")," button on the left to transition to the next chapter.")},h=function(){return l.a.createElement("div",null,"Let's start by feeling good about how easy 'Hello World' Program is.",l.a.createElement("div",{className:"section"}),"Notice the ! (exclamation mark) after the ",l.a.createElement("code",null,"println"),". It means ",l.a.createElement("code",null,"println")," is not a function but a macro.",l.a.createElement("div",{className:"section"}),"P.S. Do not forget the semicolon;")},E=function(){return l.a.createElement("div",null,'Rust gives you various ways of expressing "Hello World!". Some of them you can see on right.',l.a.createElement("div",{className:"section"}),"Data Types waiting for you in next chapter.")},b=function(){return l.a.createElement("div",null,"Rust being a statically typed language, has data types. The primitive types contains scalar and compound data types. ",l.a.createElement("br",null),l.a.createElement("div",{className:"section"}),"Few things to remember while handling data types: ",l.a.createElement("br",null),"- All variables are immutable by default. ",l.a.createElement("br",null),"- Rust is block scoped. ",l.a.createElement("br",null),"- Specifying data type explicitly is not always required for primitive types. ",l.a.createElement("br",null),l.a.createElement("div",{className:"section"}),l.a.createElement("strong",null,"Scalar Types:")," ",l.a.createElement("br",null),"Integer - unsigned being only positive, signed being both negative and positive",l.a.createElement("br",null),l.a.createElement("table",null,l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",null,"Size"),l.a.createElement("th",null,"Unsigned"),l.a.createElement("th",null,"Signed"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",null,"8 bits"),l.a.createElement("td",null,"u8"),l.a.createElement("td",null,"i8")),l.a.createElement("tr",null,l.a.createElement("td",null,"16 bits"),l.a.createElement("td",null,"u16"),l.a.createElement("td",null,"i16")),l.a.createElement("tr",null,l.a.createElement("td",null,"32 bits"),l.a.createElement("td",null,"u32"),l.a.createElement("td",null,"i32")),l.a.createElement("tr",null,l.a.createElement("td",null,"64 bits"),l.a.createElement("td",null,"u64"),l.a.createElement("td",null,"i64")),l.a.createElement("tr",null,l.a.createElement("td",null,"128 bits"),l.a.createElement("td",null,"u128"),l.a.createElement("td",null,"i128")))),l.a.createElement("div",{className:"section"}),"Float - f32, f64 for 32 bits and 64 bits respectively. ",l.a.createElement("br",null),"Boolean - bool ",l.a.createElement("br",null),"Character - char ",l.a.createElement("br",null),l.a.createElement("div",{className:"section"}),l.a.createElement("strong",null,"Compound Types:")," ",l.a.createElement("br",null),"Compound data types contains collection of scalar types.",l.a.createElement("br",null),l.a.createElement("br",null),"Tuples - A collection of values of different data types. ",l.a.createElement("br",null),"Arrays - A collection of values of similar data types. Arrays are of fixed length, hence cannot be re-sized.",l.a.createElement("div",{className:"section"}),"You can always use ",l.a.createElement("code",null,":?")," with "," to print the entire array or touple.",l.a.createElement("div",{className:"section"}),"Let's talk about strings next.")},p=function(){return l.a.createElement("div",null,"Rust has two data types for representing strings based on where are allocated in memory. ",l.a.createElement("br",null),l.a.createElement("code",null,"String")," is a growable type stored in heap, whereas ",l.a.createElement("code",null,"str")," is of fixed length stored somewhere in memory.",l.a.createElement("div",{className:"section"}),"The difference between string length and capacity lies in actual length vs total memory allocated. E.g., To declare an empty string capable of storing 10 characters can be done with ",l.a.createElement("code",null,"String::with_capacity(10)"),l.a.createElement("div",{className:"section"}),l.a.createElement("code",null,"mut")," keyword is required to make a variable mutable.",l.a.createElement("div",{className:"section"}),"Don't feel like being bothered about heap and stack? Rust requires you to think a little about it with it's ownership feature.",l.a.createElement("div",{className:"section"}),"Try naming your variables starting with a number.",l.a.createElement("div",{className:"section"}),"Vectors coming right up next.")},g=function(){return l.a.createElement("div",null,"Vectors are similar to arrays but re-sizable. They support push and pop methods to add or remove elements.",l.a.createElement("br",null),"The basic syantax can be seen on right.",l.a.createElement("div",{className:"section"}),"Let's explore conditions next.")},f=function(){return l.a.createElement("div",null,"Rust has renamed ",l.a.createElement("code",null,"switch")," as ",l.a.createElement("code",null,"match"),". ",l.a.createElement("code",null,"_")," (underscore) is used as default case.",l.a.createElement("br",null),"Apart from that, just like other languages, ",l.a.createElement("code",null,"if ")," and ",l.a.createElement("code",null,"if else")," are available.",l.a.createElement("br",null),"Conditional operator though, is not present yet.",l.a.createElement("div",{className:"section"}),"Loops next.")},y=function(){return l.a.createElement("div",null,"Following are the control flow loops.",l.a.createElement("div",{className:"section"}),"- ",l.a.createElement("code",null,"loop")," : Infinite loop without any exit statement to end the loop.",l.a.createElement("code",null,"break")," keyword works just fine in case you want to terminate the loop. ",l.a.createElement("br",null),"- ",l.a.createElement("code",null,"while")," : Loop with exit conditional. ",l.a.createElement("br",null),"- ",l.a.createElement("code",null,"for")," : The good old for loop.",l.a.createElement("div",{className:"section"}),"Loops have a label feature that can be used in conjunction with continue statement to jump.",l.a.createElement("div",{className:"section"}),"Notice that you do not need parenthesis with while or if statements.",l.a.createElement("div",{className:"section"}),"Try count++",l.a.createElement("div",{className:"section"}),"Functions coming up next.")},v=function(){return l.a.createElement("div",null,"Function ",l.a.createElement("code",null,"main")," is the entry point of Rust programs. Rust follows snake case as the conventional style for function and variable names",l.a.createElement("br",null),"The types of function arguments need to be defined.",l.a.createElement("br",null),"Function return values are specified by mentioning types they return. A function can have multiple return values. ",l.a.createElement("br",null),"To return a value from function, ",l.a.createElement("code",null,"return")," keyword is not required. Specifying the return value without semicolon inside the function does the trick. ",l.a.createElement("br",null),"Rust also support closures. The syntactic difference is that pipe needs to be used for function arguments. The scope of closures includes their enclosing function's scope along with their immediate scope.",l.a.createElement("div",{className:"section"}),"Let's check Pointers next.")},w=function(){return l.a.createElement("div",null,"Pointers are variables that points to a resource in memory. They themselves contains address of the resource they are pointing to. ",l.a.createElement("br",null),"Pointers are particularly useful while using ",l.a.createElement("code",null,"borrowing")," feature on a variable. ",l.a.createElement("br",null),"In Rust, ",l.a.createElement("code",null,"&")," (ampersand) keyword is used to create a pointer to a variable.",l.a.createElement("div",{className:"section"}),"Exploring Structs next.")},N=function(){return l.a.createElement("div",null,l.a.createElement("code",null,"struct")," is used to create a custome data type with mixed data types. They are similar to class in other languages. ",l.a.createElement("br",null),"Structs can be created either by specifying names for the fields, or without names, similar to tuples. ",l.a.createElement("br",null),"One of the major feature of struct is the ability to define functions using ",l.a.createElement("code",null,"impl")," keyword.",l.a.createElement("div",{className:"section"}),"This was a very brief primer of the Rust, to help you dive deep into further syntactic features. ",l.a.createElement("br",null),l.a.createElement("div",{className:"section"}),"All the best learning Rust!")},k=function(){return l.a.createElement("div",null,"All the best learning Rust!",l.a.createElement("div",{className:"section"}),"This tour is an effort of Paras Bhattrai. Hope you enjoyed. ",l.a.createElement("br",null),"Github: ",l.a.createElement("a",{href:"https://github.com/sivssdn"},"Paras"))},x=function(){var e=Object(n.useState)(l.a.createElement(d,null)),t=Object(c.a)(e,2),a=t[0],r=t[1],o=Object(n.useState)(0),x=Object(c.a)(o,2),T=x[0],R=x[1],S=[l.a.createElement(d,null),l.a.createElement(h,null),l.a.createElement(E,null),l.a.createElement(b,null),l.a.createElement(p,null),l.a.createElement(g,null),l.a.createElement(f,null),l.a.createElement(y,null),l.a.createElement(v,null),l.a.createElement(w,null),l.a.createElement(N,null),l.a.createElement(k,null)];return l.a.createElement("div",{className:"container"},l.a.createElement("div",{className:"section"}),l.a.createElement("div",{className:"row"},l.a.createElement(s,{header:"Chapter "+T+": "+u[T],nextChapter:function(){T<11&&R(T+1),r(S[T+1])},chapterContent:a}),l.a.createElement(i,{url:m[T]})))},T=function(){return l.a.createElement(x,null)};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(l.a.createElement(T,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},4:function(e,t,a){e.exports=a(10)},9:function(e,t,a){}},[[4,1,2]]]);
//# sourceMappingURL=main.befc78b2.chunk.js.map